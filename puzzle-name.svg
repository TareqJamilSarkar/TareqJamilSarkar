<?xml version="1.0" encoding="utf-8"?>
<!-- puzzle-name.svg
     Pure SVG animation great for GitHub README (no JS).
     Reveals "TAREQ JAMIL SARKAR" via puzzle tiles assembling.
-->
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 240" width="900" height="240" role="img" aria-label="Puzzle reveal animation: TAREQ JAMIL SARKAR">
  <style>
    /* background */
    .bg { fill: #0f1724; }
    /* central glowing text (stays behind tiles) */
    .title {
      font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      font-weight: 800;
      font-size: 48px;
      fill: #e6f1ff;
      letter-spacing: 2px;
      filter: url(#softGlow);
    }
    /* subtle shadow for tiles */
    .tile { fill: #cbd5e1; stroke: rgba(8,10,26,0.08); stroke-width:1; rx:6; ry:6; }
    /* give each tile a different delay for staggered effect */
    .t0 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.0s both; }
    .t1 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.06s both; }
    .t2 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.12s both; }
    .t3 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.18s both; }
    .t4 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.24s both; }
    .t5 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.30s both; }
    .t6 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.36s both; }
    .t7 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.42s both; }
    .t8 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.48s both; }
    .t9 { animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.54s both; }
    .t10{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.60s both; }
    .t11{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.66s both; }
    .t12{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.72s both; }
    .t13{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.78s both; }
    .t14{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.84s both; }
    .t15{ animation: assemble 1.1s cubic-bezier(.2,.9,.2,1) 0.90s both; }

    /* After assembling, tiny hover lift (gives life when used on page) */
    .group:hover .tile { transform-origin: center; transform-box: fill-box; transform: translateY(-6px) scale(1.02); transition: transform 160ms ease; }

    /* animation: tiles travel from offsets into their target positions; also rotate slightly */
    @keyframes assemble {
      0% {
        transform-box: fill-box;
        transform-origin: center;
        transform: translate(var(--sx), var(--sy)) rotate(var(--sr));
        opacity: 0.0;
      }
      60% {
        opacity: 1.0;
      }
      100% {
        transform: translate(0px,0px) rotate(0deg);
        opacity: 1.0;
      }
    }

    /* small shining sweep on text after assembled */
    .shine { animation: shine 1.6s ease 1.05s both; opacity:0.0; }
    @keyframes shine {
      0% { opacity:0; transform: translateX(-40px) skewX(-12deg); }
      60% { opacity:0.9; }
      100% { opacity:0; transform: translateX(240px) skewX(-12deg); }
    }

    /* small subtitle style */
    .sub { font-size:12px; fill:#a3b1c9; font-weight:600; letter-spacing: 1px;}
  </style>

  <!-- soft glow filter for the text -->
  <defs>
    <filter id="softGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="3.2" result="blur"/>
      <feMerge>
        <feMergeNode in="blur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <!-- mask to reveal the text area (we keep tiles above) -->
    <mask id="textMask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"/>
      <!-- the text shape becomes black in mask to punch a hole? Mask logic: we want tiles to show above text
           we'll keep mask fully white (not used for tiles here) -->
    </mask>
  </defs>

  <!-- background -->
  <rect class="bg" x="0" y="0" width="900" height="240" rx="16" ry="16"/>

  <!-- center text (behind tiles) -->
  <g transform="translate(60,130)">
    <text class="title" x="0" y="0">TAREQ JAMIL SARKAR</text>
    <text class="sub" x="0" y="38">puzzle · code · made-for-readme</text>
    <!-- Shining stripe -->
    <rect class="shine" x="-40" y="-24" width="200" height="70" fill="rgba(255,255,255,0.10)" transform="skewX(-12)"/>
  </g>

  <!-- Tiles group
       We'll draw a 16-tile strip covering the text area and animate each tile from a custom offset.
       We use CSS variables (--sx, --sy, --sr) to store start offset per tile.
  -->
  <g class="group" transform="translate(52,68)">
    <!-- create a grid 16 tiles horizontally, 1 row tall (this covers long name) -->
    <!-- tile width 50, gap 10, total width ≈ 16*50 + gaps -->
    <!-- We'll place tiles by x coordinate and give each a CSS variable with initial offset to animate from -->
    <!-- Row of tiles -->
    <!-- TILE 0 -->
    <rect class="tile t0" x="0"    y="0" width="52" height="88" style="--sx: -220px; --sy: -80px; --sr: -24deg;" />
    <rect class="tile t1" x="62"   y="0" width="52" height="88" style="--sx: 260px;  --sy: -120px; --sr: 18deg;" />
    <rect class="tile t2" x="124"  y="0" width="52" height="88" style="--sx: -180px; --sy: 120px; --sr: 10deg;" />
    <rect class="tile t3" x="186"  y="0" width="52" height="88" style="--sx: 220px;  --sy: 90px;  --sr: -16deg;" />
    <rect class="tile t4" x="248"  y="0" width="52" height="88" style="--sx: -280px; --sy: -40px; --sr: 22deg;" />
    <rect class="tile t5" x="310"  y="0" width="52" height="88" style="--sx: 320px;  --sy: -180px; --sr: -8deg;" />
    <rect class="tile t6" x="372"  y="0" width="52" height="88" style="--sx: -120px; --sy: 180px; --sr: 14deg;" />
    <rect class="tile t7" x="434"  y="0" width="52" height="88" style="--sx: 180px;  --sy: 220px; --sr: -20deg;" />
    <rect class="tile t8" x="496"  y="0" width="52" height="88" style="--sx: -340px; --sy: 160px; --sr: 24deg;" />
    <rect class="tile t9" x="558"  y="0" width="52" height="88" style="--sx: 420px;  --sy: -60px; --sr: -12deg;" />
    <rect class="tile t10" x="620" y="0" width="52" height="88" style="--sx: -320px; --sy: -200px; --sr: 20deg;" />
    <rect class="tile t11" x="682" y="0" width="52" height="88" style="--sx: 260px;  --sy: 140px; --sr: -22deg;" />
    <rect class="tile t12" x="744" y="0" width="52" height="88" style="--sx: -150px; --sy: -260px; --sr: 16deg;" />
    <rect class="tile t13" x="806" y="0" width="52" height="88" style="--sx: 120px;  --sy: 300px; --sr: -18deg;" />
    <!-- shadow tile at the end to balance -->
    <rect class="tile t14" x="868" y="0" width="52" height="88" style="--sx: -400px; --sy: 100px; --sr: 26deg;" />
    <rect class="tile t15" x="930" y="0" width="52" height="88" style="--sx: 460px;  --sy: -220px; --sr: -26deg;" opacity="0.0"/>

    <!-- Add subtle inner rectangles as "puzzle lines" -->
    <g opacity="0.06">
      <rect x="0" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="62" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="124" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="186" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="248" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="310" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="372" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="434" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="496" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="558" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="620" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="682" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="744" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="806" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
      <rect x="868" y="0" width="52" height="88" rx="6" ry="6" fill="#0b1220"/>
    </g>
  </g>

  <!-- small credit / hint -->
  <g transform="translate(20,210)">
    <text class="sub" x="0" y="0">✨ Animated puzzle reveal — TAREQ JAMIL SARKAR</text>
  </g>
</svg>
